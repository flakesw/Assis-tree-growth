ylab = "",
ylim = c(0, 2.4))
boxplot(data_11[data_11$Savanna == TRUE &
data_11$C.Cerrado..G.generalist. == "C",
"HD_ratio"],
data_11[data_11$Savanna == TRUE &
data_11$C.Cerrado..G.generalist. == "G",
"HD_ratio"],
data_11[data_11$Savanna == FALSE &
data_11$C.Cerrado..G.generalist. == "C",
"HD_ratio"],
data_11[data_11$Savanna == FALSE &
data_11$C.Cerrado..G.generalist. == "G",
"HD_ratio"],
col = c("#d95f02", "#1b9e77"),
xlab = "",
ylab = "",
ylim = c(0, 2.4))
plot(log(H.2011..m.) ~ log(dg.2011.cm), data = data_11[data_11$C.Cerrado..G.generalist. == "C", ])
plot(log(H.2011..m.) ~ log(dg.2011.cm), data = data_11[data_11$C.Cerrado..G.generalist. == "G", ])
data_11$HD_ratio <- data_11$H.2011..m/data_11$dg.2011.cm
data_11$Savanna <- ifelse(data_11$Plot %in% c(2,3,4,5,11:17,19), TRUE, FALSE)
data_11$small_diam <- ifelse(data_11$dg.2011.cm >= 5 & data_11$dg.2011.cm <= 6, TRUE, FALSE)
data_11_backup <- data_11
data_11 <- data_11[data_11$small_diam, ]
par(mar = c(5.1, 5.1, 2, 1))
boxplot(data_11[data_11$Savanna == TRUE &
data_11$C.Cerrado..G.generalist. == "C",
"HD_ratio"],
data_11[data_11$Savanna == TRUE &
data_11$C.Cerrado..G.generalist. == "G",
"HD_ratio"],
data_11[data_11$Savanna == FALSE &
data_11$C.Cerrado..G.generalist. == "C",
"HD_ratio"],
data_11[data_11$Savanna == FALSE &
data_11$C.Cerrado..G.generalist. == "G",
"HD_ratio"],
col = c("#d95f02", "#1b9e77"),
xlab = "",
ylab = "",
ylim = c(0, 2.4))
# data_11$Savanna <- as.factor(data_11$Savanna)
# data_11$C.Cerrado..G.generalist. <- as.factor(data_11$C.Cerrado..G.generalist.)
mod <- aov(lm(HD_ratio ~ Savanna*C.Cerrado..G.generalist., data = data_11))
TukeyHSD(mod)
TukeyHSD(mod)
# data_11$Savanna <- as.factor(data_11$Savanna)
# data_11$C.Cerrado..G.generalist. <- as.factor(data_11$C.Cerrado..G.generalist.)
mod <- (lm(HD_ratio ~ Savanna*C.Cerrado..G.generalist., data = data_11))
TukeyHSD(mod)
# data_11$Savanna <- as.factor(data_11$Savanna)
# data_11$C.Cerrado..G.generalist. <- as.factor(data_11$C.Cerrado..G.generalist.)
mod <- aov(lm(HD_ratio ~ Savanna*C.Cerrado..G.generalist., data = data_11))
mod
# data_11$Savanna <- as.factor(data_11$Savanna)
# data_11$C.Cerrado..G.generalist. <- as.factor(data_11$C.Cerrado..G.generalist.)
mod <- aov(lm(HD_ratio ~ Savanna + C.Cerrado..G.generalist., data = data_11))
TukeyHSD(mod)
data_11$Savanna <- as.factor(ifelse(data_11$Plot %in% c(2,3,4,5,11:17,19), TRUE, FALSE))
# data_11$Savanna <- as.factor(data_11$Savanna)
# data_11$C.Cerrado..G.generalist. <- as.factor(data_11$C.Cerrado..G.generalist.)
mod <- aov(lm(HD_ratio ~ Savanna + C.Cerrado..G.generalist., data = data_11))
TukeyHSD(mod)
# data_11$Savanna <- as.factor(data_11$Savanna)
# data_11$C.Cerrado..G.generalist. <- as.factor(data_11$C.Cerrado..G.generalist.)
mod <- aov(lm(HD_ratio ~ Savanna*C.Cerrado..G.generalist., data = data_11))
TukeyHSD(mod)
data_11 <- data_11_backup
data_11$HD_ratio <- data_11$H.2011..m/data_11$dg.2011.cm
data_11$Savanna <- as.factor(ifelse(data_11$Plot %in% c(2,3,4,5,11:17,19), TRUE, FALSE))
data_11$small_diam <- ifelse(data_11$dg.2011.cm >= 5 & data_11$dg.2011.cm <= 7, TRUE, FALSE)
data_11 <- data_11[data_11$small_diam, ]
boxplot(data_11[data_11$Savanna == TRUE &
data_11$C.Cerrado..G.generalist. == "C",
"HD_ratio"],
data_11[data_11$Savanna == TRUE &
data_11$C.Cerrado..G.generalist. == "G",
"HD_ratio"],
data_11[data_11$Savanna == FALSE &
data_11$C.Cerrado..G.generalist. == "C",
"HD_ratio"],
data_11[data_11$Savanna == FALSE &
data_11$C.Cerrado..G.generalist. == "G",
"HD_ratio"],
col = c("#d95f02", "#1b9e77"),
xlab = "",
ylab = "",
ylim = c(0, 2.4))
# data_11$Savanna <- as.factor(data_11$Savanna)
# data_11$C.Cerrado..G.generalist. <- as.factor(data_11$C.Cerrado..G.generalist.)
mod <- aov(lm(HD_ratio ~ Savanna*C.Cerrado..G.generalist., data = data_11))
TukeyHSD(mod)
svg(filename="./plots/Figure 6 height diam allometry.svg",
width = 3,
height=3,
pointsize=9)
par(mar = c(5.1, 5.1, 2, 1))
boxplot(data_11[data_11$Savanna == TRUE &
data_11$C.Cerrado..G.generalist. == "C",
"HD_ratio"],
data_11[data_11$Savanna == TRUE &
data_11$C.Cerrado..G.generalist. == "G",
"HD_ratio"],
data_11[data_11$Savanna == FALSE &
data_11$C.Cerrado..G.generalist. == "C",
"HD_ratio"],
data_11[data_11$Savanna == FALSE &
data_11$C.Cerrado..G.generalist. == "G",
"HD_ratio"],
col = c("#d95f02", "#1b9e77"),
xlab = "",
ylab = "",
ylim = c(0, 2.4))
# data_11$Savanna <- as.factor(data_11$Savanna)
# data_11$C.Cerrado..G.generalist. <- as.factor(data_11$C.Cerrado..G.generalist.)
mod <- aov(lm(HD_ratio ~ Savanna*C.Cerrado..G.generalist., data = data_11))
TukeyHSD(mod)
# text(x =  c(1,2,3,4), y = 2.3, c("a", "b", "c", "d"), )
axis(side = 1, at = c(1,2,3,4), labels = c("S", "G", "S", "G"))
mtext(text = "Savanna", side = 1, line= 3, at = 1.5)
mtext(text = "Forest", side = 1, line= 3, at = 3.5)
title(ylab = expression(paste("Height:diameter ratio (m cm"^"-1", ")")))
dev.off()
bseM1
bseM2
#-----------------------------------------------------------------
# Load libraries
set.seed(129021)
library("plyr")
library("effects")
library("lme4")
library("MuMIn")
library("ggpubr")
library("reshape2")
library("ggplot2")
library("ResourceSelection")
library("maptools")
library("vegan")
library("dplyr")
library("lattice")
library("flora")
options(na.action = "na.omit")
# Full model: FT x CI interaction with soils
# = model 10 from above
# all_data$inc_06_11_rel <- all_data$inc_06_11/all_data$dg.2006.cm
# all_data$inc_11_16_rel <- all_data$inc_11_16/all_data$dg.2011.cm
options(na.action = na.omit)
min.growth <- -0.2
data_06 <- subset(all_data, inc_06_11 >= min.growth & inc_06_11 <= 3 &  dg.2006.cm > 5)
data_11 <- subset(all_data, inc_11_16 >= min.growth & inc_06_11 <= 3 & dg.2011.cm > 5 &
!(Current.number %in% c(2775, 2030)))
ft_ci_soils_06 <- lmer(inc_06_11 ~
log(dg.2006.cm) +
scale(BA.above2006) * C.Cerrado..G.generalist. +
poly(PC1, 2) + poly(PC2, 2) +
(1|Code) + (1|Plot),
data = data_06)
ft_ci_soils_11 <- lmer(inc_11_16~
scale(log(dg.2011.cm)) +
scale(BA.above2011) * C.Cerrado..G.generalist. +
poly(PC1, 2) + poly(PC2, 2) +
(1|Code) + (1|Plot),
data = data_11)
summary(ft_ci_soils_06, ddf = "Satterthwaite")
summary(ft_ci_soils_11)
min.growth <- -0.2
data_06 <- subset(all_data, inc_06_11 >= min.growth & inc_06_11 <= 3 &  dg.2006.cm > 5)
data_11 <- subset(all_data, inc_11_16 >= min.growth & inc_06_11 <= 3 & dg.2011.cm > 5 &
!(Current.number %in% c(2775, 2030)))
ft_ci_soils_06 <- lmer(inc_06_11 ~
log(dg.2006.cm) +
scale(BA.above2006) * C.Cerrado..G.generalist. +
poly(PC1, 2) + poly(PC2, 2) +
(1|Code) + (1|Plot),
data = data_06)
ft_ci_soils_11 <- lmer(inc_11_16~
scale(log(dg.2011.cm)) +
scale(BA.above2011) * C.Cerrado..G.generalist. +
poly(PC1, 2) + poly(PC2, 2) +
(1|Code) + (1|Plot),
data = data_11)
summary(ft_ci_soils_06, ddf = "Satterthwaite")
summary(ft_ci_soils_11)
plot(residuals(ft_ci_soils_06) ~ fitted(ft_ci_soils_06))
plot(residuals(ft_ci_soils_11) ~ fitted(ft_ci_soils_11))
plot(residuals(ft_ci_soils_06) ~ fitted(ft_ci_soils_06))
plot(residuals(ft_ci_soils_11) ~ fitted(ft_ci_soils_11))
data_06 <- subset(all_data, inc_06_11 >= min.growth & inc_06_11 <= 3 &  dg.2006.cm > 5)
data_11 <- subset(all_data, inc_11_16 >= min.growth & inc_06_11 <= 3 & dg.2011.cm > 5 &
!(Current.number %in% c(2775, 2030)))
data_06 <- subset(all_data, inc_06_11 >= min.growth &  dg.2006.cm > 5)
data_11 <- subset(all_data, inc_11_16 >= min.growth  & dg.2011.cm > 5 &
!(Current.number %in% c(2775, 2030)))
ft_ci_soils_06 <- lmer(inc_06_11 ~
log(dg.2006.cm) +
scale(BA.above2006) * C.Cerrado..G.generalist. +
poly(PC1, 2) + poly(PC2, 2) +
(1|Code) + (1|Plot),
data = data_06)
ft_ci_soils_11 <- lmer(inc_11_16~
scale(log(dg.2011.cm)) +
scale(BA.above2011) * C.Cerrado..G.generalist. +
poly(PC1, 2) + poly(PC2, 2) +
(1|Code) + (1|Plot),
data = data_11)
summary(ft_ci_soils_06, ddf = "Satterthwaite")
summary(ft_ci_soils_11)
plot(residuals(ft_ci_soils_06) ~ fitted(ft_ci_soils_06))
plot(residuals(ft_ci_soils_11) ~ fitted(ft_ci_soils_11))
summary(ft_ci_soils_11)
data_06 <- subset(all_data, inc_06_11 >= min.growth & inc_06_11 <= 3 &  dg.2006.cm > 5)
data_11 <- subset(all_data, inc_11_16 >= min.growth & inc_06_11 <= 3 & dg.2011.cm > 5 &
!(Current.number %in% c(2775, 2030)))
ft_ci_soils_06 <- lmer(inc_06_11 ~
log(dg.2006.cm) +
scale(BA.above2006) * C.Cerrado..G.generalist. +
poly(PC1, 2) + poly(PC2, 2) +
(1|Code) + (1|Plot),
data = data_06)
ft_ci_soils_11 <- lmer(inc_11_16~
scale(log(dg.2011.cm)) +
scale(BA.above2011) * C.Cerrado..G.generalist. +
poly(PC1, 2) + poly(PC2, 2) +
(1|Code) + (1|Plot),
data = data_11)
write.csv(summary(ft_ci_soils_11)$coef, "./model outputs/model_coefs_11_diam.csv")
summary(ft_ci_soils_11)
data_06 <- subset(all_data, inc_06_11 >= min.growth & inc_06_11 <= 3 &  dg.2006.cm > 5)
data_11 <- subset(all_data, inc_11_16 >= min.growth & inc_06_11 <= 3 & dg.2011.cm > 5 &
!(Current.number %in% c(2775, 2030)))
ft_ci_soils_06 <- lmer(inc_06_11 ~
log(dg.2006.cm) +
scale(BA.above2006) * C.Cerrado..G.generalist. +
poly(PC1, 2) + poly(PC2, 2) +
(1|Code) + (1|Plot),
data = data_06)
ft_ci_soils_11 <- lmer(inc_11_16~
scale(log(dg.2011.cm)) +
scale(BA.above2011) * C.Cerrado..G.generalist. +
poly(PC1, 2) + poly(PC2, 2) +
(1|Code) + (1|Plot),
data = data_11)
summary(ft_ci_soils_06, ddf = "Satterthwaite")
summary(ft_ci_soils_11)
data_06 %>%
modelr::bootstrap(n_samples) %>%
dplyr::mutate(lm = purrr::map(strap, ~lmer(inc_06_11 ~
log(dg.2006.cm) +
scale(BA.above2006) * C.Cerrado..G.generalist. +
poly(PC1, 2) + poly(PC2, 2) +
(1|Code) + (1|Plot),
data = .)),
tidy = purrr::map(lm, broom.mixed::tidy)) -> bootCrime
n_samples <- 5000
data_06 %>%
modelr::bootstrap(n_samples) %>%
dplyr::mutate(lm = purrr::map(strap, ~lmer(inc_06_11 ~
log(dg.2006.cm) +
scale(BA.above2006) * C.Cerrado..G.generalist. +
poly(PC1, 2) + poly(PC2, 2) +
(1|Code) + (1|Plot),
data = .)),
tidy = purrr::map(lm, broom.mixed::tidy)) -> bootCrime
bootCrime %>%
pull(tidy) %>%
purrr::map2_df(., # map to return a data frame
seq(1, n_samples), # make sure to get this seq right. We did this 1000 times.
~mutate(.x, resample = .y)) -> tidybootCrime
tidybootCrime %>%
# group by term, naturally
dplyr::group_by(term) %>%
# This is the actual bootstrapped standard error you want
dplyr::summarize(bse = sd(estimate)) -> bseM1
data_11 %>%
modelr::bootstrap(n_samples) %>%
mutate(lm = purrr::map(strap, ~lmer(inc_11_16~
scale(log(dg.2011.cm)) +
scale(BA.above2011) * C.Cerrado..G.generalist. +
poly(PC1, 2) + poly(PC2, 2) +
(1|Code) + (1|Plot),
data = .)),
tidy = purrr::map(lm, broom.mixed::tidy)) -> bootCrime
bootCrime %>%
pull(tidy) %>%
purrr::map2_df(., # map to return a data frame
seq(1, n_samples), # make sure to get this seq right. We did this 1000 times.
~mutate(.x, resample = .y)) -> tidybootCrime
tidybootCrime %>%
# group by term, naturally
dplyr::group_by(term) %>%
# This is the actual bootstrapped standard error you want
dplyr::summarize(bse = sd(estimate)) -> bseM2
install.packages("lmtest")
install.packages("sandwich")
library("lmtest")
library("sandwich")
coeftest(ft_ci_soils_06, vcov = vcovBS(m))
coeftest(ft_ci_soils_06, vcov = vcovBS(ft_ci_soils_06))
coeftest(ft_ci_soils_06, vcov = vcovHAC(ft_ci_soils_06))
coeftest(ft_ci_soils_06, vcov = vcovBS(ft_ci_soils_06))
coeftest(ft_ci_soils_06, vcov = vcovCL(ft_ci_soils_06))
data_06 %>%
modelr::bootstrap(n_samples) %>%
dplyr::mutate(lm = purrr::map(strap, ~lmer(inc_06_11 ~
log(dg.2006.cm) +
scale(BA.above2006) * C.Cerrado..G.generalist. +
poly(PC1, 2) + poly(PC2, 2) +
(1|Code) + (1|Plot),
data = .)),
tidy = purrr::map(lm, broom.mixed::tidy)) -> bootCrime
bootCrime %>%
pull(tidy) %>%
purrr::map2_df(., # map to return a data frame
seq(1, n_samples), # make sure to get this seq right. We did this 1000 times.
~mutate(.x, resample = .y)) -> tidybootCrime
tidybootCrime %>%
# group by term, naturally
dplyr::group_by(term) %>%
# This is the actual bootstrapped standard error you want
dplyr::summarize(bse = sd(estimate)) -> bseM1
data_11 %>%
modelr::bootstrap(n_samples) %>%
mutate(lm = purrr::map(strap, ~lmer(inc_11_16~
scale(log(dg.2011.cm)) +
scale(BA.above2011) * C.Cerrado..G.generalist. +
poly(PC1, 2) + poly(PC2, 2) +
(1|Code) + (1|Plot),
data = .)),
tidy = purrr::map(lm, broom.mixed::tidy)) -> bootCrime
bootCrime %>%
pull(tidy) %>%
purrr::map2_df(., # map to return a data frame
seq(1, n_samples), # make sure to get this seq right. We did this 1000 times.
~mutate(.x, resample = .y)) -> tidybootCrime
tidybootCrime %>%
# group by term, naturally
dplyr::group_by(term) %>%
# This is the actual bootstrapped standard error you want
dplyr::summarize(bse = sd(estimate)) -> bseM2
bseM1
bseM2
bseM3
min.growth <- -0.5
max.growth <- 1.2
options(na.action = na.omit)
data_06 <- subset(all_data, inc_06_11_ht >= min.growth & inc_06_11_ht <= max.growth &
dg.2006.cm > 5)
data_11 <- subset(all_data, inc_11_16_ht >= min.growth & inc_11_16_ht <= max.growth &
dg.2011.cm > 5)
ft_ci_soils_06_ht <- lmer(inc_06_11_ht ~
scale(H.2006) +
scale(BA.above2006) * C.Cerrado..G.generalist. +
poly(PC1, 2) + poly(PC2, 2) +
(1|Code) + (1|Plot),
data = data_06)
ft_ci_soils_11_ht <- lmer(inc_11_16_ht ~
scale(H.2011..m.) +
scale(BA.above2011) * C.Cerrado..G.generalist. +
poly(PC1, 2) + poly(PC2, 2) +
(1|Code) + (1|Plot),
data = data_11)
summary(ft_ci_soils_06_ht)
summary(ft_ci_soils_11_ht)
plot(residuals(ft_ci_soils_06_ht) ~ fitted(ft_ci_soils_06_ht))
#-----
# bootstrap height models
# code from http://svmiller.com/blog/2020/03/bootstrap-standard-errors-in-r/
detach("package:lmerTest", unload = TRUE)
n_samples <- 5000
data_06 %>%
modelr::bootstrap(n_samples) %>%
mutate(lm = purrr::map(strap, ~lmer(inc_06_11_ht ~
scale(H.2006) +
scale(BA.above2006) * C.Cerrado..G.generalist. +
poly(PC1, 2) + poly(PC2, 2) +
(1|Code) + (1|Plot),
data = .)),
tidy = purrr::map(lm, broom.mixed::tidy)) -> bootCrime
bootCrime %>%
pull(tidy) %>%
purrr::map2_df(., # map to return a data frame
seq(1, n_samples), # make sure to get this seq right. We did this 1000 times.
~mutate(.x, resample = .y)) -> tidybootCrime
tidybootCrime %>%
# group by term, naturally
dplyr::group_by(term) %>%
# This is the actual bootstrapped standard error you want
dplyr::summarize(bse = sd(estimate)) -> bseM3
data_11 %>%
modelr::bootstrap(n_samples) %>%
mutate(lm = purrr::map(strap, ~lmer(inc_11_16_ht~
scale(H.2011..m.) +
scale(BA.above2011) * C.Cerrado..G.generalist. +
poly(PC1, 2) + poly(PC2, 2) +
(1|Code) + (1|Plot),
data = .)),
tidy = purrr::map(lm, broom.mixed::tidy)) -> bootCrime
bootCrime %>%
pull(tidy) %>%
purrr::map2_df(., # map to return a data frame
seq(1, n_samples), # make sure to get this seq right. We did this 1000 times.
~mutate(.x, resample = .y)) -> tidybootCrime
tidybootCrime %>%
# group by term, naturally
dplyr::group_by(term) %>%
# This is the actual bootstrapped standard error you want
dplyr::summarize(bse = sd(estimate)) -> bseM4
bseM1
view(bseM1)
View(bseM1)
View(bseM1)
View(bseM2)
View(bseM3)
View(bseM4)
citation(modelr)
citation("modelr")
par(mfrow = c(2,2))
plot(residuals(ft_ci_soils_06) ~ fitted(ft_ci_soils_06))
plot(residuals(ft_ci_soils_06) ~ fitted(ft_ci_soils_06),
xlab = "Fitted",
ylab = "Residuals")
plot(residuals(ft_ci_soils_06) ~ fitted(ft_ci_soils_06),
xlab = "Fitted",
ylab = "Residuals",
main = "Diameter growth, 2006-2011")
abline(0,1)
abline(h = 0)
svg(filename="./plots/residuals vs fitted.svg",
width = 6,
height=6,
pointsize=9)
par(mfrow = c(2,2))
plot(residuals(ft_ci_soils_06) ~ fitted(ft_ci_soils_06),
xlab = "Fitted",
ylab = "Residuals",
main = "Diameter growth, 2006-2011")
abline(h = 0)
plot(residuals(ft_ci_soils_11) ~ fitted(ft_ci_soils_11),
xlab = "Fitted",
ylab = "Residuals",
main = "Diameter growth, 2011-2016")
abline(h = 0)
plot(residuals(ft_ci_soils_06_ht) ~ fitted(ft_ci_soils_06_ht),
xlab = "Fitted",
ylab = "Residuals",
main = "Height growth, 2006-2011")
abline(h = 0)
plot(residuals(ft_ci_soils_11_ht) ~ fitted(ft_ci_soils_11_ht),
xlab = "Fitted",
ylab = "Residuals",
main = "Height growth, 2011-2016")
abline(h = 0)
dev.off()
plot(residuals(ft_ci_soils_06) ~ fitted(ft_ci_soils_06),
xlab = "Fitted",
ylab = "Residuals",
main = "Diameter growth, 2006-2011",
pch = 21,
fill = addTrans("gray", 50))
plot(residuals(ft_ci_soils_06) ~ fitted(ft_ci_soils_06),
xlab = "Fitted",
ylab = "Residuals",
main = "Diameter growth, 2006-2011",
pch = 21,
bg = addTrans("gray", 50))
plot(residuals(ft_ci_soils_06) ~ fitted(ft_ci_soils_06),
xlab = "Fitted",
ylab = "Residuals",
main = "Diameter growth, 2006-2011",
pch = 21,
bg = addTrans("gray", 50),
col = NA)
abline(h = 0)
svg(filename="./plots/residuals vs fitted.svg",
width = 6,
height=6,
pointsize=9)
par(mfrow = c(2,2))
plot(residuals(ft_ci_soils_06) ~ fitted(ft_ci_soils_06),
xlab = "Fitted",
ylab = "Residuals",
main = "Diameter growth, 2006-2011",
pch = 21,
bg = addTrans("gray", 50),
col = NA)
abline(h = 0)
plot(residuals(ft_ci_soils_11) ~ fitted(ft_ci_soils_11),
xlab = "Fitted",
ylab = "Residuals",
main = "Diameter growth, 2011-2016",
pch = 21,
bg = addTrans("gray", 50),
col = NA)
abline(h = 0)
plot(residuals(ft_ci_soils_06_ht) ~ fitted(ft_ci_soils_06_ht),
xlab = "Fitted",
ylab = "Residuals",
main = "Height growth, 2006-2011",
pch = 21,
bg = addTrans("gray", 50),
col = NA)
abline(h = 0)
plot(residuals(ft_ci_soils_11_ht) ~ fitted(ft_ci_soils_11_ht),
xlab = "Fitted",
ylab = "Residuals",
main = "Height growth, 2011-2016",
pch = 21,
bg = addTrans("gray", 50),
col = NA)
abline(h = 0)
dev.off()
