tree_data$BA.above2006[i] <- sum(trees[trees$H.2006 >= tree_h, "G2006..m2."], na.rm = TRUE)
tree_data$BA.above2006_prop[i] <- tree_data$BA.above2006[i] / sum(trees$G2006..m2., na.rm = TRUE)
}
}
for(i in 1:nrow(tree_data)){
tree_no <- tree_data[i, "Current.number"]
tree_h <- as.numeric(tree_data[i, "H.2011..m."])
plot_no <- tree_data[i, "Plot"]
trees <- get_heights_csas(plot_no, 2011)
trees <- trees[trees$Current.number != tree_no, ]
#BA.above is the sum of basal area of taller trees
if(!is.na(tree_h)){
tree_data$BA.above2011[i] <- sum(trees[trees$H.2011..m. >= tree_h, "G2011..m2."], na.rm = TRUE)
tree_data$BA.above2011_prop[i] <- tree_data$BA.above2011[i] / sum(trees$G2011..m2., na.rm = TRUE)
}
}
for(i in 1:nrow(tree_data)){
tree_no <- tree_data[i, "Current.number"]
tree_h <- as.numeric(tree_data[i, "H.2016.m"])
plot_no <- tree_data[i, "Plot"]
trees <- get_heights_csas(plot_no, 2016)
trees <- trees[trees$Current.number != tree_no, ]
#BA.above is the sum of basal area of taller trees
if(!is.na(tree_h)){
tree_data$BA.above2016[i] <- sum(trees[trees$H.2016.m >= tree_h, "G2016..m2."], na.rm = TRUE)
tree_data$BA.above2016_prop[i] <- tree_data$BA.above2016[i] / sum(trees$G2016..m2., na.rm = TRUE)
}
}
tree_data$Died2011 <- as.factor(ifelse(tree_data$Alive2006 == "v" & tree_data$Alive2011 == "m",
"y", "n"))
tree_data$Died2016 <- as.factor(ifelse(tree_data$Alive2011 == "v" & tree_data$Alive2016 == "m",
"y", "n"))
tree_data$Died_all <- as.factor(ifelse(tree_data$Died2011 == "y" | tree_data$Died2016 == "y", "y", "n"))
# clean up data to estimate growth
# calculate growth separately for each time interval
tree_data$inc_06_11 <- NA
tree_data$inc_11_16 <- NA
tree_data$inc_06_16 <- NA
for(i in 1:nrow(tree_data)){
row <- tree_data[i, ]
if(!is.na(row$Alive2006) & !is.na(row$Alive2011) & row$Alive2006 == "v" & row$Alive2011 == "v" ){
tree_data[i, "inc_06_11"] <- (as.numeric(row$dg.2011.cm) - as.numeric(row$dg.2006.cm))/5
}
if(!is.na(row$Alive2011) & !is.na(row$Alive2016) & row$Alive2011 == "v" & row$Alive2016 == "v" ){
tree_data[i, "inc_11_16"] <- (as.numeric(row$dg.2016.cm) - as.numeric(row$dg.2011.cm))/5
}
if(!is.na(row$Alive2006) & !is.na(row$Alive2016) & row$Alive2006 == "v" & row$Alive2016 == "v" ){
tree_data[i, "inc_06_16"] <- (as.numeric(row$dg.2016.cm) - as.numeric(row$dg.2006.cm))/10
}
}
#calculate height growth for each interval
tree_data$inc_06_11_ht <- NA
tree_data$inc_11_16_ht <- NA
tree_data$inc_06_16_ht <- NA
for(i in 1:nrow(tree_data)){
row <- tree_data[i, ]
if(!is.na(row$Alive2006) & !is.na(row$Alive2011) & row$Alive2006 == "v" & row$Alive2011 == "v" ){
tree_data[i, "inc_06_11_ht"] <- (as.numeric(row$H.2011..m.) - as.numeric(row$H.2006))/5
}
if(!is.na(row$Alive2011) & !is.na(row$Alive2016) & row$Alive2011 == "v" & row$Alive2016 == "v" ){
tree_data[i, "inc_11_16_ht"] <- (as.numeric(row$H.2016.m) - as.numeric(row$H.2011..m.))/5
}
if(!is.na(row$Alive2006) & !is.na(row$Alive2016) & row$Alive2006 == "v" & row$Alive2016 == "v" ){
tree_data[i, "inc_06_16_ht"] <- (as.numeric(row$H.2016.m) - as.numeric(row$H.2006))/10
}
}
# first interval growth is higher than second interval or overall growth
t.test(tree_data$inc_06_11, tree_data$inc_11_16)
t.test(tree_data$inc_06_11, tree_data$inc_06_16)
t.test(tree_data$inc_11_16, tree_data$inc_06_16)
# make a new dataframe with clean data
tree_data_clean <- tree_data[, c(2, 3, 5, 7, 8, 9, 10, 12, 49, 13, 14, 35, 25, 15, 45, 46, 47, 50:64)]
data_06 <- subset(all_data, inc_06_11 >= min.growth & inc_06_11 <= 3 &  dg.2006.cm > 5)
data_11 <- subset(all_data, inc_11_16 >= min.growth & inc_06_11 <= 3 & dg.2011.cm > 5 &
!(Current.number %in% c(2775, 2030)))
#----------------------------------------------------------------------
# Full model: FT x CI interaction with soils
# = model 10 from above
# all_data$inc_06_11_rel <- all_data$inc_06_11/all_data$dg.2006.cm
# all_data$inc_11_16_rel <- all_data$inc_11_16/all_data$dg.2011.cm
options(na.action = na.omit)
ft_ci_soils_06 <- lmer(inc_06_11 ~
log(dg.2006.cm) +
scale(BA.above2006) * C.Cerrado..G.generalist. +
poly(PC1, 2) + poly(PC2, 2) +
(1|Code) + (1|Plot),
data = data_06)
ft_ci_soils_11 <- lmer(inc_11_16~
scale(log(dg.2011.cm)) +
scale(BA.above2011) * C.Cerrado..G.generalist. +
poly(PC1, 2) + poly(PC2, 2) +
(1|Code) + (1|Plot),
data = data_11)
summary(ft_ci_soils_06, ddf = "Satterthwaite")
summary(ft_ci_soils_11)
data_06 <- subset(all_data, inc_06_11 >= min.growth & inc_06_11 <= 1 &  dg.2006.cm > 5)
data_11 <- subset(all_data, inc_11_16 >= min.growth & inc_06_11 <= 1 & dg.2011.cm > 5 &
!(Current.number %in% c(2775, 2030)))
ft_ci_soils_06 <- lmer(inc_06_11 ~
log(dg.2006.cm) +
scale(BA.above2006) * C.Cerrado..G.generalist. +
poly(PC1, 2) + poly(PC2, 2) +
(1|Code) + (1|Plot),
data = data_06)
ft_ci_soils_11 <- lmer(inc_11_16~
scale(log(dg.2011.cm)) +
scale(BA.above2011) * C.Cerrado..G.generalist. +
poly(PC1, 2) + poly(PC2, 2) +
(1|Code) + (1|Plot),
data = data_11)
summary(ft_ci_soils_06, ddf = "Satterthwaite")
summary(ft_ci_soils_11)
data_06 <- subset(all_data, inc_06_11 >= min.growth & inc_06_11 <= 3 &  dg.2006.cm > 5)
data_11 <- subset(all_data, inc_11_16 >= min.growth & inc_06_11 <= 3 & dg.2011.cm > 5 &
!(Current.number %in% c(2775, 2030)))
ft_ci_soils_06 <- lmer(inc_06_11 ~
log(dg.2006.cm) +
scale(BA.above2006) * C.Cerrado..G.generalist. +
poly(PC1, 2) + poly(PC2, 2) +
(1|Code) + (1|Plot),
data = data_06)
ft_ci_soils_11 <- lmer(inc_11_16~
scale(log(dg.2011.cm)) +
scale(BA.above2011) * C.Cerrado..G.generalist. +
poly(PC1, 2) + poly(PC2, 2) +
(1|Code) + (1|Plot),
data = data_11)
summary(ft_ci_soils_06, ddf = "Satterthwaite")
summary(ft_ci_soils_11)
summary(ft_ci_soils_06, ddf = "Satterthwaite")
summary(ft_ci_soils_11)
plot(residuals(ft_ci_soils_06) ~ fitted(ft_ci_soils_06))
data06 %>%
bootstrap(1000) -> bootstraps06
data06 %>%
modelr::bootstrap(1000) -> bootstraps06
data_06 %>%
modelr::bootstrap(1000) -> bootstraps06
data_06 %>%
modelr::bootstrap(1000) %>%
mutate(lm = map(strap, ~lm(violent ~ poverty + single + metro + white + highschool,
data = .)),
tidy = map(lm, broom::tidy)) -> bootCrime
data_06 %>%
modelr::bootstrap(1000) %>%
mutate(lm = purrr:map(strap, ~lmer(inc_06_11 ~
log(dg.2006.cm) +
scale(BA.above2006) * C.Cerrado..G.generalist. +
poly(PC1, 2) + poly(PC2, 2) +
(1|Code) + (1|Plot),
data = .)),
tidy = map(lm, broom::tidy)) -> bootCrime
data_06 %>%
modelr::bootstrap(1000) %>%
mutate(lm = purrr:map(strap, ~lmer(inc_06_11 ~
log(dg.2006.cm) +
scale(BA.above2006) * C.Cerrado..G.generalist. +
poly(PC1, 2) + poly(PC2, 2) +
(1|Code) + (1|Plot),
data = .)),
tidy = purrr::map(lm, broom::tidy)) -> bootCrime
data_06 %>%
modelr::bootstrap(1000) %>%
mutate(lm = purrr:map(strap, ~lmer(inc_06_11 ~
log(dg.2006.cm) +
scale(BA.above2006) * C.Cerrado..G.generalist. +
poly(PC1, 2) + poly(PC2, 2) +
(1|Code) + (1|Plot),
data = .)),
tidy = purrr::map(lm, broom::tidy)) -> bootCrime
data_06 %>%
modelr::bootstrap(1000) %>%
mutate(lm = purrr::map(strap, ~lmer(inc_06_11 ~
log(dg.2006.cm) +
scale(BA.above2006) * C.Cerrado..G.generalist. +
poly(PC1, 2) + poly(PC2, 2) +
(1|Code) + (1|Plot),
data = .)),
tidy = purrr::map(lm, broom::tidy)) -> bootCrime
bootCrime %>%
pull(tidy) %>%
map2_df(., # map to return a data frame
seq(1, 1000), # make sure to get this seq right. We did this 1000 times.
~mutate(.x, resample = .y)) -> tidybootCri
tidybootCri %>%
# group by term, naturally
group_by(term) %>%
# This is the actual bootstrapped standard error you want
summarize(bse = sd(estimate)) -> bseM1
bootCrime %>%
pull(tidy) %>%
purrr::map2_df(., # map to return a data frame
seq(1, 1000), # make sure to get this seq right. We did this 1000 times.
~mutate(.x, resample = .y)) -> tidybootCri
detach("lmerTest")
detach("package:lmerTest", unload = TRUE)
data_06 %>%
modelr::bootstrap(1000) %>%
mutate(lm = purrr::map(strap, ~lmer(inc_06_11 ~
log(dg.2006.cm) +
scale(BA.above2006) * C.Cerrado..G.generalist. +
poly(PC1, 2) + poly(PC2, 2) +
(1|Code) + (1|Plot),
data = .)),
tidy = purrr::map(lm, broom::tidy)) -> bootCrime
bootCrime %>%
pull(tidy) %>%
purrr::map2_df(., # map to return a data frame
seq(1, 1000), # make sure to get this seq right. We did this 1000 times.
~mutate(.x, resample = .y)) -> tidybootCri
tidybootCri %>%
# group by term, naturally
group_by(term) %>%
# This is the actual bootstrapped standard error you want
summarize(bse = sd(estimate)) -> bseM1
install.packages("broom.mixed")
install.packages("broom.mixed")
data_06 %>%
modelr::bootstrap(1000) %>%
mutate(lm = purrr::map(strap, ~lmer(inc_06_11 ~
log(dg.2006.cm) +
scale(BA.above2006) * C.Cerrado..G.generalist. +
poly(PC1, 2) + poly(PC2, 2) +
(1|Code) + (1|Plot),
data = .)),
tidy = purrr::map(lm, broom.mixed::tidy)) -> bootCrime
bootCrime %>%
pull(tidy) %>%
purrr::map2_df(., # map to return a data frame
seq(1, 1000), # make sure to get this seq right. We did this 1000 times.
~mutate(.x, resample = .y)) -> tidybootCrime
tidybootCrime %>%
# group by term, naturally
group_by(term) %>%
# This is the actual bootstrapped standard error you want
summarize(bse = sd(estimate)) -> bseM1
bsem!
bseM1
summary(ft_ci_soils_06)
n_samples <- 5000
data_06 %>%
modelr::bootstrap(n_samples) %>%
mutate(lm = purrr::map(strap, ~lmer(inc_06_11 ~
log(dg.2006.cm) +
scale(BA.above2006) * C.Cerrado..G.generalist. +
poly(PC1, 2) + poly(PC2, 2) +
(1|Code) + (1|Plot),
data = .)),
tidy = purrr::map(lm, broom.mixed::tidy)) -> bootCrime
bootCrime %>%
pull(tidy) %>%
purrr::map2_df(., # map to return a data frame
seq(1, n_samples), # make sure to get this seq right. We did this 1000 times.
~mutate(.x, resample = .y)) -> tidybootCrime
tidybootCrime %>%
# group by term, naturally
group_by(term) %>%
# This is the actual bootstrapped standard error you want
summarize(bse = sd(estimate)) -> bseM1
bseM1
data_11 %>%
modelr::bootstrap(n_samples) %>%
mutate(lm = purrr::map(strap, ~ft_ci_soils_11 <- lmer(inc_11_16~
scale(log(dg.2011.cm)) +
scale(BA.above2011) * C.Cerrado..G.generalist. +
poly(PC1, 2) + poly(PC2, 2) +
(1|Code) + (1|Plot),
data = .)),
tidy = purrr::map(lm, broom.mixed::tidy)) -> bootCrime
data_11 %>%
modelr::bootstrap(n_samples) %>%
mutate(lm = purrr::map(strap, ~lmer(inc_11_16~
scale(log(dg.2011.cm)) +
scale(BA.above2011) * C.Cerrado..G.generalist. +
poly(PC1, 2) + poly(PC2, 2) +
(1|Code) + (1|Plot),
data = .)),
tidy = purrr::map(lm, broom.mixed::tidy)) -> bootCrime
bootCrime %>%
pull(tidy) %>%
purrr::map2_df(., # map to return a data frame
seq(1, n_samples), # make sure to get this seq right. We did this 1000 times.
~mutate(.x, resample = .y)) -> tidybootCrime
tidybootCrime %>%
# group by term, naturally
group_by(term) %>%
# This is the actual bootstrapped standard error you want
summarize(bse = sd(estimate)) -> bseM2
seM2
bseM2
options(na.action = na.omit)
data_06 <- subset(all_data, inc_06_11_ht >= min.growth & dg.2006.cm > 5)
data_11 <- subset(all_data, inc_11_16_ht >= min.growth & dg.2011.cm > 5)
ft_ci_soils_06_ht <- lmer(inc_06_11_ht ~
scale(H.2006) +
scale(BA.above2006) * C.Cerrado..G.generalist. +
poly(PC1, 2) + poly(PC2, 2) +
(1|Code) + (1|Plot),
data = data_06)
ft_ci_soils_11_ht <- lmer(inc_11_16_ht ~
scale(H.2011..m.) +
scale(BA.above2011) * C.Cerrado..G.generalist. +
poly(PC1, 2) + poly(PC2, 2) +
(1|Code) + (1|Plot),
data = data_11)
summary(ft_ci_soils_06_ht)
summary(ft_ci_soils_11_ht)
min.growth <- -1
options(na.action = na.omit)
data_06 <- subset(all_data, inc_06_11_ht >= min.growth & dg.2006.cm > 5)
data_11 <- subset(all_data, inc_11_16_ht >= min.growth & dg.2011.cm > 5)
ft_ci_soils_06_ht <- lmer(inc_06_11_ht ~
scale(H.2006) +
scale(BA.above2006) * C.Cerrado..G.generalist. +
poly(PC1, 2) + poly(PC2, 2) +
(1|Code) + (1|Plot),
data = data_06)
ft_ci_soils_11_ht <- lmer(inc_11_16_ht ~
scale(H.2011..m.) +
scale(BA.above2011) * C.Cerrado..G.generalist. +
poly(PC1, 2) + poly(PC2, 2) +
(1|Code) + (1|Plot),
data = data_11)
summary(ft_ci_soils_06_ht)
summary(ft_ci_soils_11_ht)
plot(residuals(ft_ci_soils_06_ht) ~ fitted(ft_ci_soils_06_ht))
abline(h = 0)
ggqqplot(residuals(ft_ci_soils_06_ht))
plot(residuals(ft_ci_soils_11_ht) ~ fitted(ft_ci_soils_11_ht))
abline(h = 0)
ggqqplot(residuals(ft_ci_soils_11_ht))
plot(log(H.2011..m.) ~ log(dg.2011.cm), data = data_11[data_11$C.Cerrado..G.generalist. == "C", ])
plot(log(H.2011..m.) ~ log(dg.2011.cm), data = data_11[data_11$C.Cerrado..G.generalist. == "G", ])
data_11$HD_ratio <- data_11$H.2011..m/data_11$dg.2011.cm
data_11$Savanna <- ifelse(data_11$Plot %in% c(2,3,4,5,11:17,19), TRUE, FALSE)
data_11$small_diam <- ifelse(data_11$dg.2011.cm >= 5 & data_11$dg.2011.cm <= 7, TRUE, FALSE)
boxplot(data_11[data_11$Savanna == TRUE &
data_11$C.Cerrado..G.generalist. == "C",
"HD_ratio"],
data_11[data_11$Savanna == TRUE &
data_11$C.Cerrado..G.generalist. == "G",
"HD_ratio"],
data_11[data_11$Savanna == FALSE &
data_11$C.Cerrado..G.generalist. == "C",
"HD_ratio"],
data_11[data_11$Savanna == FALSE &
data_11$C.Cerrado..G.generalist. == "G",
"HD_ratio"],
col = c("#d95f02", "#1b9e77"),
xlab = "",
ylab = "",
ylim = c(0, 2.4))
data_11_backup <- data_11
data_11_backup <- data_11
data_11 <- data_11[small_diam, ]
data_11 <- data_11[data_11$small_diam, ]
boxplot(data_11[data_11$Savanna == TRUE &
data_11$C.Cerrado..G.generalist. == "C",
"HD_ratio"],
data_11[data_11$Savanna == TRUE &
data_11$C.Cerrado..G.generalist. == "G",
"HD_ratio"],
data_11[data_11$Savanna == FALSE &
data_11$C.Cerrado..G.generalist. == "C",
"HD_ratio"],
data_11[data_11$Savanna == FALSE &
data_11$C.Cerrado..G.generalist. == "G",
"HD_ratio"],
col = c("#d95f02", "#1b9e77"),
xlab = "",
ylab = "",
ylim = c(0, 2.4))
data_11$small_diam <- ifelse(data_11$dg.2011.cm >= 5 & data_11$dg.2011.cm <= 6, TRUE, FALSE)
data_11 <- data_11[data_11$small_diam, ]
boxplot(data_11[data_11$Savanna == TRUE &
data_11$C.Cerrado..G.generalist. == "C",
"HD_ratio"],
data_11[data_11$Savanna == TRUE &
data_11$C.Cerrado..G.generalist. == "G",
"HD_ratio"],
data_11[data_11$Savanna == FALSE &
data_11$C.Cerrado..G.generalist. == "C",
"HD_ratio"],
data_11[data_11$Savanna == FALSE &
data_11$C.Cerrado..G.generalist. == "G",
"HD_ratio"],
col = c("#d95f02", "#1b9e77"),
xlab = "",
ylab = "",
ylim = c(0, 2.4))
boxplot(data_11[data_11$Savanna == TRUE &
data_11$C.Cerrado..G.generalist. == "C",
"HD_ratio"],
data_11[data_11$Savanna == TRUE &
data_11$C.Cerrado..G.generalist. == "G",
"HD_ratio"],
data_11[data_11$Savanna == FALSE &
data_11$C.Cerrado..G.generalist. == "C",
"HD_ratio"],
data_11[data_11$Savanna == FALSE &
data_11$C.Cerrado..G.generalist. == "G",
"HD_ratio"],
col = c("#d95f02", "#1b9e77"),
xlab = "",
ylab = "",
ylim = c(0, 2.4))
plot(log(H.2011..m.) ~ log(dg.2011.cm), data = data_11[data_11$C.Cerrado..G.generalist. == "C", ])
plot(log(H.2011..m.) ~ log(dg.2011.cm), data = data_11[data_11$C.Cerrado..G.generalist. == "G", ])
data_11$HD_ratio <- data_11$H.2011..m/data_11$dg.2011.cm
data_11$Savanna <- ifelse(data_11$Plot %in% c(2,3,4,5,11:17,19), TRUE, FALSE)
data_11$small_diam <- ifelse(data_11$dg.2011.cm >= 5 & data_11$dg.2011.cm <= 6, TRUE, FALSE)
data_11_backup <- data_11
data_11 <- data_11[data_11$small_diam, ]
par(mar = c(5.1, 5.1, 2, 1))
boxplot(data_11[data_11$Savanna == TRUE &
data_11$C.Cerrado..G.generalist. == "C",
"HD_ratio"],
data_11[data_11$Savanna == TRUE &
data_11$C.Cerrado..G.generalist. == "G",
"HD_ratio"],
data_11[data_11$Savanna == FALSE &
data_11$C.Cerrado..G.generalist. == "C",
"HD_ratio"],
data_11[data_11$Savanna == FALSE &
data_11$C.Cerrado..G.generalist. == "G",
"HD_ratio"],
col = c("#d95f02", "#1b9e77"),
xlab = "",
ylab = "",
ylim = c(0, 2.4))
# data_11$Savanna <- as.factor(data_11$Savanna)
# data_11$C.Cerrado..G.generalist. <- as.factor(data_11$C.Cerrado..G.generalist.)
mod <- aov(lm(HD_ratio ~ Savanna*C.Cerrado..G.generalist., data = data_11))
TukeyHSD(mod)
TukeyHSD(mod)
# data_11$Savanna <- as.factor(data_11$Savanna)
# data_11$C.Cerrado..G.generalist. <- as.factor(data_11$C.Cerrado..G.generalist.)
mod <- (lm(HD_ratio ~ Savanna*C.Cerrado..G.generalist., data = data_11))
TukeyHSD(mod)
# data_11$Savanna <- as.factor(data_11$Savanna)
# data_11$C.Cerrado..G.generalist. <- as.factor(data_11$C.Cerrado..G.generalist.)
mod <- aov(lm(HD_ratio ~ Savanna*C.Cerrado..G.generalist., data = data_11))
mod
# data_11$Savanna <- as.factor(data_11$Savanna)
# data_11$C.Cerrado..G.generalist. <- as.factor(data_11$C.Cerrado..G.generalist.)
mod <- aov(lm(HD_ratio ~ Savanna + C.Cerrado..G.generalist., data = data_11))
TukeyHSD(mod)
data_11$Savanna <- as.factor(ifelse(data_11$Plot %in% c(2,3,4,5,11:17,19), TRUE, FALSE))
# data_11$Savanna <- as.factor(data_11$Savanna)
# data_11$C.Cerrado..G.generalist. <- as.factor(data_11$C.Cerrado..G.generalist.)
mod <- aov(lm(HD_ratio ~ Savanna + C.Cerrado..G.generalist., data = data_11))
TukeyHSD(mod)
# data_11$Savanna <- as.factor(data_11$Savanna)
# data_11$C.Cerrado..G.generalist. <- as.factor(data_11$C.Cerrado..G.generalist.)
mod <- aov(lm(HD_ratio ~ Savanna*C.Cerrado..G.generalist., data = data_11))
TukeyHSD(mod)
data_11 <- data_11_backup
data_11$HD_ratio <- data_11$H.2011..m/data_11$dg.2011.cm
data_11$Savanna <- as.factor(ifelse(data_11$Plot %in% c(2,3,4,5,11:17,19), TRUE, FALSE))
data_11$small_diam <- ifelse(data_11$dg.2011.cm >= 5 & data_11$dg.2011.cm <= 7, TRUE, FALSE)
data_11 <- data_11[data_11$small_diam, ]
boxplot(data_11[data_11$Savanna == TRUE &
data_11$C.Cerrado..G.generalist. == "C",
"HD_ratio"],
data_11[data_11$Savanna == TRUE &
data_11$C.Cerrado..G.generalist. == "G",
"HD_ratio"],
data_11[data_11$Savanna == FALSE &
data_11$C.Cerrado..G.generalist. == "C",
"HD_ratio"],
data_11[data_11$Savanna == FALSE &
data_11$C.Cerrado..G.generalist. == "G",
"HD_ratio"],
col = c("#d95f02", "#1b9e77"),
xlab = "",
ylab = "",
ylim = c(0, 2.4))
# data_11$Savanna <- as.factor(data_11$Savanna)
# data_11$C.Cerrado..G.generalist. <- as.factor(data_11$C.Cerrado..G.generalist.)
mod <- aov(lm(HD_ratio ~ Savanna*C.Cerrado..G.generalist., data = data_11))
TukeyHSD(mod)
svg(filename="./plots/Figure 6 height diam allometry.svg",
width = 3,
height=3,
pointsize=9)
par(mar = c(5.1, 5.1, 2, 1))
boxplot(data_11[data_11$Savanna == TRUE &
data_11$C.Cerrado..G.generalist. == "C",
"HD_ratio"],
data_11[data_11$Savanna == TRUE &
data_11$C.Cerrado..G.generalist. == "G",
"HD_ratio"],
data_11[data_11$Savanna == FALSE &
data_11$C.Cerrado..G.generalist. == "C",
"HD_ratio"],
data_11[data_11$Savanna == FALSE &
data_11$C.Cerrado..G.generalist. == "G",
"HD_ratio"],
col = c("#d95f02", "#1b9e77"),
xlab = "",
ylab = "",
ylim = c(0, 2.4))
# data_11$Savanna <- as.factor(data_11$Savanna)
# data_11$C.Cerrado..G.generalist. <- as.factor(data_11$C.Cerrado..G.generalist.)
mod <- aov(lm(HD_ratio ~ Savanna*C.Cerrado..G.generalist., data = data_11))
TukeyHSD(mod)
# text(x =  c(1,2,3,4), y = 2.3, c("a", "b", "c", "d"), )
axis(side = 1, at = c(1,2,3,4), labels = c("S", "G", "S", "G"))
mtext(text = "Savanna", side = 1, line= 3, at = 1.5)
mtext(text = "Forest", side = 1, line= 3, at = 3.5)
title(ylab = expression(paste("Height:diameter ratio (m cm"^"-1", ")")))
dev.off()
